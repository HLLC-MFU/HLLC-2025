---
description: 
globs: 
alwaysApply: true
---
# üìò Cursor Rules for Backend Decorator, Logging, and Exception Handling

## 1. ‚úÖ HTTP Handler Convention

All HTTP handlers **must follow this structure**:

```go
func (h *httpHandler) CreateUser(c *fiber.Ctx) error {
	handler := decorator.ComposeDecorators(
		decorator.WithRecovery(),
		decorator.WithLogging,
	)(decorator.WithJSONValidation[dto.CreateUserRequest](func(c *fiber.Ctx, req *dto.CreateUserRequest) error {
		ctx, cancel := context.WithTimeout(c.Context(), 10*time.Second)
		defer cancel()

		user, err := h.userService.CreateUser(ctx, req)
		if err != nil {
			return exceptions.HandleError(c, err)
		}

		return response.Success(c, fiber.StatusCreated, user)
	}))

	return handler(c)
}
```

## 2. üì¶ Repository Pattern Convention

Repository functions must use:
- `WithTimeout` for context timeout
- Context-based `logger`
- `exceptions` for errors
- Proper BSON conversion

### Example:
```go
func (r *userRepository) CreateUser(ctx context.Context, user *userPb.User) error {
	_, err := decorator.WithTimeout[struct{}](10*time.Second)(func(ctx context.Context) (struct{}, error) {
		logger := logging.DefaultLogger.WithContext(ctx)

		usersColl := r.usersColl(ctx)

		// Validation
		err := usersColl.FindOne(ctx, bson.M{"username": user.Username}).Decode(&existingUser)
		...
		if err == nil {
			return struct{}{}, exceptions.AlreadyExists(...)
		}

		// Insert
		_, err = usersColl.InsertOne(ctx, doc)
		if err != nil {
			return struct{}{}, exceptions.Internal(...)
		}

		logger.Info("User created successfully", ...)
		return struct{}{}, nil
	})(ctx)
	return err
}
```

## 3. üß† Service Layer Convention

Service functions must:
- Always receive `ctx context.Context`
- Return either `(T, error)` or `error`
- Use `decorator.WithTimeout[T]` to wrap operations
- Use `WithLogger(...)` and return `AppError` consistently

### Example:
```go
func (s *userService) CreateUser(ctx context.Context, req *dto.CreateUserRequest) (*userPb.User, error) {
	return decorator.WithTimeout[*userPb.User](10*time.Second)(func(ctx context.Context) (*userPb.User, error) {
		logger := logging.DefaultLogger.WithContext(ctx)

		user := &userPb.User{
			Username: req.Username,
			Password: req.Password,
			Name:     req.Name,
			// ... other fields
		}

		err := s.userRepo.CreateUser(ctx, user)
		if err != nil {
			logger.Error("Failed to create user", err)
			return nil, err
		}

		logger.Info("Created user successfully",
			logging.FieldUserID, user.Id,
			"username", user.Username,
		)

		return user, nil
	})(ctx)
}
```

## 4. üß∞ Decorator Rules

- Use `ComposeDecorators(...)` to apply middleware.
- Use `WithTimeout`, `WithLogger`, `WithRecovery`, `WithLogging`.
- For Mongo context usage, apply `WithMongoTimeout` or `WithMongoTimeoutResult[T]`.
- Use `WithRequestValidation` or `WithJSONValidation[T]` for input binding.

## 5. üõ°Ô∏è Exception Rules

Use `AppError` for all errors:
- Never return raw `error`, wrap in:
  - `exceptions.NotFound(...)`
  - `exceptions.AlreadyExists(...)`
  - `exceptions.InvalidInput(...)`
  - `exceptions.Internal(...)`
- Use `exceptions.HandleError(c, err)` in Fiber.
- Use `FromError(err)` when catching generic `error`.

## 6. üß™ HTTP Decorator Stack Summary

| Decorator              | Description                         |
|------------------------|-------------------------------------|
| `WithRecovery()`       | Panic recovery                     |
| `WithLogging`          | Structured HTTP logs               |
| `WithJSONValidation[T]`| JSON body binding & validation     |
| `WithTimeout[T]`       | Adds timeout to DB/gRPC ops        |
| `WithLogger(...)`      | Logs lifecycle with duration       |

## 7. üìã Common Mistakes To Avoid

- ‚ùå Calling services without timeout
- ‚ùå Returning raw `error`
- ‚ùå Logging with `fmt.Println`
- ‚ùå No recovery decorator in handler

## 8. ‚úÖ Best Practice Summary

| Layer        | Rule                                                                 |
|--------------|----------------------------------------------------------------------|
| HTTP Handler | Compose decorators + structured response + timeout                  |
| Repository   | Structured logs + context + AppError + retry (optional)             |
| Service      | Context + logging + return typed error                              |
| Decorators   | Composable, context-safe, reusable                                  |
| Logger       | Use `DefaultLogger.WithContext(ctx)`                                |
| Exception    | Always use `AppError`, never plain error                            |

---

This rule must be followed for all new modules. Ensure all commits reflect these patterns.

üë®‚Äçüíª _Maintainer: Dev. Bengi (Backend Team)_

