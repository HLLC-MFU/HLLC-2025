import React, { useState } from "react";
import {
  Table,
  TableHeader,
  TableColumn,
  TableBody,
  TableRow,
  TableCell,
  getKeyValue,
  Button,
  Input,
  SortDescriptor,
} from "@heroui/react";
import { Trash2, Search } from "lucide-react";

// mock data
const rows = [
  {
    key: "1",
    user: "6731701055",
    text: "üëå‚úåüëç(‡∏Å‡∏∏‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡πâ)",
    image: "https://i.pinimg.com/736x/4e/8a/6d/4e8a6da813ffe2337b5182587ebede35.jpg",
  },
  {
    key: "2",
    user: "6731804051",
    text: "‡∏Å‡∏∏‡∏Å‡πà‡∏≤‡∏¢‡∏ù‡∏ô‡πÅ‡∏ï‡πâ ‡∏ï‡∏Å‡∏´‡∏≤‡∏õ‡πà‡∏≠‡∏°‡∏∂‡∏á‡∏ô‡∏±‡∏Å‡∏ô‡∏∞",
    image: "https://i.pinimg.com/736x/4e/8a/6d/4e8a6da813ffe2337b5182587ebede35.jpg",
  },
  {
    key: "3",
    user: "6731503888",
    text: "‡πÇ‡∏ñ‡πÑ‡∏≠‡πâ................‡πÄ‡∏≠‡πã‡∏¢ ‡πÑ‡∏≠‡πâ‡∏ä‡∏≤‡∏ï‡∏¥‡∏Ñ‡∏≤‡∏á‡∏Ñ‡∏Å ‡πÑ‡∏≠‡πâ‡∏£‡∏Å‡πÅ‡∏ú‡πà‡∏ô‡∏î‡∏¥‡∏ô ‡πÑ‡∏≠‡πâ‡∏•‡∏¥‡πâ‡∏ô‡∏™‡∏≠‡∏á‡πÅ‡∏â‡∏Å ‡πÑ‡∏≠‡πâ‡πÅ‡∏´‡∏ß‡∏Å‡∏Å‡∏≠‡∏´‡∏ç‡πâ‡∏≤ ‡πÑ‡∏≠‡πâ‡∏ö‡πâ‡∏≤‡∏´‡πâ‡∏≤‡∏£‡πâ‡∏≠‡∏¢‡∏à‡∏≥‡∏û‡∏ß‡∏Å ‡πÑ‡∏≠‡πâ‡∏õ‡∏•‡∏ß‡∏Å‡πÉ‡∏ï‡πâ‡∏´‡∏•‡∏±‡∏á‡∏Ñ‡∏≤ ‡πÑ‡∏≠‡πâ‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏•‡∏≤‡∏à‡∏ß‡∏î ‡πÑ‡∏≠‡πâ‡∏Å‡∏£‡∏ß‡∏î‡∏ó‡πâ‡∏≠‡∏á‡∏£‡πà‡∏≠‡∏á ‡πÑ‡∏≠‡πâ‡∏ö‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ç‡∏ä‡∏≤ ‡πÑ‡∏≠‡πâ‡∏õ‡∏•‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏¥‡∏ô‡πÄ‡∏ö‡πá‡∏î ‡πÑ‡∏≠‡πâ‡πÄ‡∏´‡πá‡∏î‡∏™‡∏≤‡∏°‡∏™‡∏µ ‡πÑ‡∏≠‡πâ‡∏ä‡∏∞‡∏ô‡∏µ‡∏™‡∏≤‡∏°‡∏£‡∏™ ‡πÑ‡∏≠‡πâ‡∏ï‡∏î‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏î‡∏±‡∏á ‡πÑ‡∏≠‡πâ‡∏ó‡∏±‡πà‡∏á‡∏ï‡∏µ‡πÄ‡∏´‡∏•‡πá‡∏Å ‡πÑ‡∏≠‡πâ‡πÄ‡∏î‡πá‡∏Å‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡πà‡∏≠‡∏ô ‡πÑ‡∏≠‡πâ‡∏ô‡∏≠‡∏ô‡πÄ‡∏Å‡∏≤ ‡πÑ‡∏≠‡πâ‡∏Å‡∏∞‡πÇ‡∏´‡∏•‡∏Å‡∏ã‡∏≠‡∏≠‡∏π‡πâ ‡πÑ‡∏≠‡πâ‡∏Å‡∏π‡πà‡πÑ‡∏°‡πà‡∏Å‡∏•‡∏±‡∏ö ‡πÑ‡∏≠‡πâ‡∏ï‡∏±‡∏ö‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Å‡∏•‡∏∑‡∏≠ ‡πÑ‡∏≠‡πâ‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡∏≠‡∏´‡∏¥‡∏ß‡∏≤‡∏ï‡πå ‡πÑ‡∏≠‡πâ‡∏°‡πâ‡∏≤‡∏Ç‡∏µ‡πâ‡∏Ñ‡∏£‡∏≠‡∏Å ‡πÑ‡∏≠‡πâ‡∏´‡∏≠‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏ô‡∏¥‡∏° ‡πÑ‡∏≠‡πâ‡∏Ç‡∏¥‡∏°‡∏™‡∏≤‡∏¢‡∏Ç‡∏≤‡∏î ‡πÑ‡∏≠‡πâ‡∏ä‡∏≤‡∏ï‡∏¥‡∏™‡∏∏‡∏ô‡∏±‡∏Ç ‡πÑ‡∏≠‡πâ‡∏ï‡∏∞‡∏´‡∏ß‡∏±‡∏Å‡∏ï‡∏∞‡∏ö‡∏ß‡∏¢ ‡πÑ‡∏≠‡πâ‡∏Å‡∏•‡πâ‡∏ß‡∏¢‡∏ï‡∏≤‡∏Å‡πÅ‡∏´‡πâ‡∏á ‡πÑ‡∏≠‡πâ‡πÅ‡∏Å‡∏á‡∏ü‡∏±‡∏Å‡∏ó‡∏≠‡∏á ‡πÑ‡∏≠‡πâ‡∏Ñ‡∏•‡∏≠‡∏á‡πÄ‡∏à‡πá‡∏î‡∏Ñ‡∏î ‡πÑ‡∏≠‡πâ‡∏ä‡∏∞‡∏°‡∏î‡πÄ‡∏ä‡πá‡∏î ‡πÑ‡∏≠‡πâ‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏ï‡πá‡∏°‡∏ï‡∏±‡∏ß ‡πÑ‡∏≠‡πâ‡∏°‡∏±‡πà‡∏ß‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏ö ‡πÑ‡∏≠‡πâ‡∏®‡∏û‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏∑‡∏î ‡πÑ‡∏≠‡πâ‡∏´‡∏∑‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ñ‡∏≠ ‡πÑ‡∏≠‡πâ‡∏õ‡∏•‡∏≤‡∏´‡∏°‡∏≠‡πÅ‡∏ñ‡∏Å‡πÄ‡∏´‡∏á‡∏∑‡∏≠‡∏Å ‡πÑ‡∏≠‡πâ‡πÄ‡∏ú‡∏∑‡∏≠‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏±‡∏ô ‡πÑ‡∏≠‡πâ‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á ‡πÑ‡∏≠‡πâ‡πÇ‡∏Å‡∏î‡∏±‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏®‡∏û ‡πÑ‡∏≠‡πâ‡∏Å‡∏ö‡∏ú‡∏±‡∏î‡πÄ‡∏ú‡πá‡∏î ‡πÑ‡∏≠‡πâ‡πÄ‡∏õ‡πá‡∏î‡∏ó‡∏≠‡∏î‡∏Å‡∏£‡∏∞‡πÄ‡∏ó‡∏µ‡∏¢‡∏° ",
    image: "https://i.pinimg.com/736x/4e/8a/6d/4e8a6da813ffe2337b5182587ebede35.jpg",
  },
];

// column structure
const columns = [
  { key: "user", label: "User", sortable: true },
  { key: "text", label: "Text", sortable: true },
  { key: "image", label: "LamduanImage", sortable: false },
  { key: "action", label: "Actions", sortable: false },
];

export default function TableLamduanFlowers() {
  const [searchQuery, setSearchQuery] = useState("");
  const [sortDescriptor, setSortDescriptor] = useState<SortDescriptor>({
    column: "user",
    direction: "ascending",
  });

  const filteredItems = rows
    .filter(
      (item) =>
        item.user.includes(searchQuery) ||
        item.text.toLowerCase().includes(searchQuery.toLowerCase())
    )
    .sort((a, b) => {
      const { column, direction } = sortDescriptor;
      if (!column || column === "image" || column === "action") return 0;

      const first = a[column as keyof typeof a] ?? "";
      const second = b[column as keyof typeof b] ?? "";
      const cmp =
        typeof first === "string" && typeof second === "string"
          ? first.localeCompare(second)
          : 0;
      return direction === "ascending" ? cmp : -cmp;
    });

  return (
    <div className="flex flex-col gap-4">
      <div className="flex justify-end">
        <Input
          placeholder="Search"
          startContent={<Search className="text-default-400" />}
          value={searchQuery}
          onValueChange={setSearchQuery}
          className="max-w-full"
        />
      </div>

      <Table
        aria-label="Manage Lamduan Table"
        sortDescriptor={sortDescriptor}
        onSortChange={setSortDescriptor}
      >
        <TableHeader columns={columns}>
          {(column) => (
            <TableColumn
              key={column.key}
              allowsSorting={column.sortable}
              className={["image", "action"].includes(column.key) ? "text-right" : ""}
              style={{
                width: column.key === "image" ? "80px" : column.key === "action" ? "80px" : "auto",
              }}
            >
              {column.label}
            </TableColumn>
          )}
        </TableHeader>

        <TableBody items={filteredItems}>
          {(item) => (
            <TableRow key={item.key}>
              {(columnKey) => {
                if (columnKey === "image") {
                  return (
                    <TableCell className="text-right">
                      <img
                        src={item.image}
                        alt="Lamduan"
                        className="w-[60px] h-[60px] object-cover rounded"
                      />
                    </TableCell>
                  );
                }

                if (columnKey === "action") {
                  return (
                    <TableCell className="text-right">
                      <Button
                        isIconOnly
                        size="sm"
                        variant="light"
                        color="danger"
                        onPress={() => alert(`Delete ${item.user}`)}
                      >
                        <Trash2 size={16} />
                      </Button>
                    </TableCell>
                  );
                }

                return (
                  <TableCell className="py-4 px-2">
                    {getKeyValue(item, columnKey)}
                  </TableCell>
                );
              }}
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  );
}
