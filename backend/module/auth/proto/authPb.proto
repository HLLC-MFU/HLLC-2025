// backend/module/auth/proto/authPb.proto
syntax = "proto3";

package auth;
option go_package = "github.com/HLLC-MFU/HLLC-2025/backend/module/auth/proto/generated;generated";

// Internal service messages for authentication
message UserInfo {
    string id = 1;
    string username = 2;
    string first_name = 3;
    string middle_name = 4;
    string last_name = 5;
    repeated string roles = 6;
    string major_id = 7;
}

// Session model for auth repository
message Session {
    string id = 1;
    string user_id = 2;
    string token = 3;
    int64 expires_at = 4;  // Unix timestamp
    int64 created_at = 5;  // Unix timestamp
    int64 updated_at = 6;  // Unix timestamp
    string user_agent = 7;
    string ip = 8;
    bool is_active = 9;
}

// RefreshToken model for auth repository
message RefreshToken {
    string id = 1;
    string user_id = 2;
    string token = 3;
    int64 expires_at = 4;  // Unix timestamp
    int64 last_login_at = 5;  // Unix timestamp
}

message InternalLoginRequest {
    string username = 1;
    string password = 2;
}

message InternalLoginResponse {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_at = 3;
    UserInfo user = 4;
}

message ValidateTokenRequest {
    string token = 1;
}

message ValidateTokenResponse {
    bool valid = 1;
    string error = 2;
    UserInfo user = 3;
}

message RefreshTokenRequest {
    string refresh_token = 1;
}

message RefreshTokenResponse {
    string access_token = 1;
    string refresh_token = 2;
    int64 expires_at = 3;
}

message RevokeSessionRequest {
    string user_id = 1;
}

message RevokeSessionResponse {
    bool success = 1;
    string error = 2;
}

// Session management messages
message CreateSessionRequest {
    string user_id = 1;
    string token = 2;
    int64 expires_at = 3;
    string user_agent = 4;
    string ip = 5;
}

message CreateSessionResponse {
    bool success = 1;
    string error = 2;
}

message FindSessionRequest {
    string token = 1;
}

message FindSessionResponse {
    bool found = 1;
    string user_id = 2;
    string error = 3;
}

message DeactivateSessionRequest {
    string token = 1;
}

message DeactivateSessionResponse {
    bool success = 1;
    string error = 2;
}

// Internal AuthService for service-to-service communication
service AuthService {
    // Internal authentication methods
    rpc InternalLogin(InternalLoginRequest) returns (InternalLoginResponse);
    rpc ValidateToken(ValidateTokenRequest) returns (ValidateTokenResponse);
    rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse);
    rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse);
    
    // Session management methods
    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
    rpc FindSessionByToken(FindSessionRequest) returns (FindSessionResponse);
    rpc DeactivateSession(DeactivateSessionRequest) returns (DeactivateSessionResponse);
    rpc DeactivateAllUserSessions(RevokeSessionRequest) returns (RevokeSessionResponse);
}