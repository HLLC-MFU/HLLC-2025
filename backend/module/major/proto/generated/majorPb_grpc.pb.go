// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: module/major/proto/majorPb.proto

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MajorService_CreateMajor_FullMethodName        = "/major.MajorService/CreateMajor"
	MajorService_GetMajor_FullMethodName           = "/major.MajorService/GetMajor"
	MajorService_ListMajors_FullMethodName         = "/major.MajorService/ListMajors"
	MajorService_ListMajorsBySchool_FullMethodName = "/major.MajorService/ListMajorsBySchool"
	MajorService_UpdateMajor_FullMethodName        = "/major.MajorService/UpdateMajor"
	MajorService_DeleteMajor_FullMethodName        = "/major.MajorService/DeleteMajor"
)

// MajorServiceClient is the client API for MajorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Major service definition
type MajorServiceClient interface {
	CreateMajor(ctx context.Context, in *CreateMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error)
	GetMajor(ctx context.Context, in *GetMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error)
	ListMajors(ctx context.Context, in *ListMajorsRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error)
	ListMajorsBySchool(ctx context.Context, in *ListMajorsBySchoolRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error)
	UpdateMajor(ctx context.Context, in *UpdateMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error)
	DeleteMajor(ctx context.Context, in *DeleteMajorRequest, opts ...grpc.CallOption) (*DeleteMajorResponse, error)
}

type majorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMajorServiceClient(cc grpc.ClientConnInterface) MajorServiceClient {
	return &majorServiceClient{cc}
}

func (c *majorServiceClient) CreateMajor(ctx context.Context, in *CreateMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MajorResponse)
	err := c.cc.Invoke(ctx, MajorService_CreateMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *majorServiceClient) GetMajor(ctx context.Context, in *GetMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MajorResponse)
	err := c.cc.Invoke(ctx, MajorService_GetMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *majorServiceClient) ListMajors(ctx context.Context, in *ListMajorsRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMajorsResponse)
	err := c.cc.Invoke(ctx, MajorService_ListMajors_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *majorServiceClient) ListMajorsBySchool(ctx context.Context, in *ListMajorsBySchoolRequest, opts ...grpc.CallOption) (*ListMajorsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMajorsResponse)
	err := c.cc.Invoke(ctx, MajorService_ListMajorsBySchool_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *majorServiceClient) UpdateMajor(ctx context.Context, in *UpdateMajorRequest, opts ...grpc.CallOption) (*MajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MajorResponse)
	err := c.cc.Invoke(ctx, MajorService_UpdateMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *majorServiceClient) DeleteMajor(ctx context.Context, in *DeleteMajorRequest, opts ...grpc.CallOption) (*DeleteMajorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMajorResponse)
	err := c.cc.Invoke(ctx, MajorService_DeleteMajor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MajorServiceServer is the server API for MajorService service.
// All implementations must embed UnimplementedMajorServiceServer
// for forward compatibility.
//
// Major service definition
type MajorServiceServer interface {
	CreateMajor(context.Context, *CreateMajorRequest) (*MajorResponse, error)
	GetMajor(context.Context, *GetMajorRequest) (*MajorResponse, error)
	ListMajors(context.Context, *ListMajorsRequest) (*ListMajorsResponse, error)
	ListMajorsBySchool(context.Context, *ListMajorsBySchoolRequest) (*ListMajorsResponse, error)
	UpdateMajor(context.Context, *UpdateMajorRequest) (*MajorResponse, error)
	DeleteMajor(context.Context, *DeleteMajorRequest) (*DeleteMajorResponse, error)
	mustEmbedUnimplementedMajorServiceServer()
}

// UnimplementedMajorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMajorServiceServer struct{}

func (UnimplementedMajorServiceServer) CreateMajor(context.Context, *CreateMajorRequest) (*MajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMajor not implemented")
}
func (UnimplementedMajorServiceServer) GetMajor(context.Context, *GetMajorRequest) (*MajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMajor not implemented")
}
func (UnimplementedMajorServiceServer) ListMajors(context.Context, *ListMajorsRequest) (*ListMajorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMajors not implemented")
}
func (UnimplementedMajorServiceServer) ListMajorsBySchool(context.Context, *ListMajorsBySchoolRequest) (*ListMajorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMajorsBySchool not implemented")
}
func (UnimplementedMajorServiceServer) UpdateMajor(context.Context, *UpdateMajorRequest) (*MajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMajor not implemented")
}
func (UnimplementedMajorServiceServer) DeleteMajor(context.Context, *DeleteMajorRequest) (*DeleteMajorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMajor not implemented")
}
func (UnimplementedMajorServiceServer) mustEmbedUnimplementedMajorServiceServer() {}
func (UnimplementedMajorServiceServer) testEmbeddedByValue()                      {}

// UnsafeMajorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MajorServiceServer will
// result in compilation errors.
type UnsafeMajorServiceServer interface {
	mustEmbedUnimplementedMajorServiceServer()
}

func RegisterMajorServiceServer(s grpc.ServiceRegistrar, srv MajorServiceServer) {
	// If the following call pancis, it indicates UnimplementedMajorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MajorService_ServiceDesc, srv)
}

func _MajorService_CreateMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).CreateMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_CreateMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).CreateMajor(ctx, req.(*CreateMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MajorService_GetMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).GetMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_GetMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).GetMajor(ctx, req.(*GetMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MajorService_ListMajors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMajorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).ListMajors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_ListMajors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).ListMajors(ctx, req.(*ListMajorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MajorService_ListMajorsBySchool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMajorsBySchoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).ListMajorsBySchool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_ListMajorsBySchool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).ListMajorsBySchool(ctx, req.(*ListMajorsBySchoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MajorService_UpdateMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).UpdateMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_UpdateMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).UpdateMajor(ctx, req.(*UpdateMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MajorService_DeleteMajor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMajorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MajorServiceServer).DeleteMajor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MajorService_DeleteMajor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MajorServiceServer).DeleteMajor(ctx, req.(*DeleteMajorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MajorService_ServiceDesc is the grpc.ServiceDesc for MajorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MajorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "major.MajorService",
	HandlerType: (*MajorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMajor",
			Handler:    _MajorService_CreateMajor_Handler,
		},
		{
			MethodName: "GetMajor",
			Handler:    _MajorService_GetMajor_Handler,
		},
		{
			MethodName: "ListMajors",
			Handler:    _MajorService_ListMajors_Handler,
		},
		{
			MethodName: "ListMajorsBySchool",
			Handler:    _MajorService_ListMajorsBySchool_Handler,
		},
		{
			MethodName: "UpdateMajor",
			Handler:    _MajorService_UpdateMajor_Handler,
		},
		{
			MethodName: "DeleteMajor",
			Handler:    _MajorService_DeleteMajor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "module/major/proto/majorPb.proto",
}
