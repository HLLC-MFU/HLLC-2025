package service

import (
	"chat/module/chat/model"
	"context"
	"fmt"
	"log"

	"go.mongodb.org/mongo-driver/bson/primitive"
)

// CanUserSendMessages checks if a user can send messages in a room
func (s *ChatService) CanUserSendMessages(ctx context.Context, userID, roomID primitive.ObjectID) bool {
	// Check if user is banned or muted
	if s.restrictionService.IsUserBanned(ctx, userID, roomID) || s.restrictionService.IsUserMuted(ctx, userID, roomID) {
		return false
	}
	return true
}

// CanUserViewMessages checks if a user can view messages in a room
func (s *ChatService) CanUserViewMessages(ctx context.Context, userID, roomID primitive.ObjectID) bool {
	// Check if user is banned (muted users can still view)
	if s.restrictionService.IsUserBanned(ctx, userID, roomID) {
		return false
	}
	return true
}

// **ENHANCED: SendMessage with robust error handling and phantom prevention**

// Optimize ‡πÉ‡∏´‡πâ Support SendMsg ‡πÉ‡∏´‡πâ handling phantom message (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏µ = ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ save ‡∏•‡∏á‡πÉ‡∏ô DB)
func (s *ChatService) SendMessage(ctx context.Context, msg *model.ChatMessage, metadata interface{}) error {
	log.Printf("[ChatService] SendMessage called for room %s by user %s", msg.RoomID.Hex(), msg.UserID.Hex())
	if !isValidChatMessage(msg) {
		return fmt.Errorf("invalid message: empty or unsupported content")
	}
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö moderation status ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
	if !s.CanUserSendMessages(ctx, msg.UserID, msg.RoomID) {
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å ban ‡∏´‡∏£‡∏∑‡∏≠ mute
		if s.restrictionService.IsUserBanned(ctx, msg.UserID, msg.RoomID) {
			return fmt.Errorf("user is banned from this room")
		}
		if s.restrictionService.IsUserMuted(ctx, msg.UserID, msg.RoomID) {
			return fmt.Errorf("user is muted in this room")
		}
		return fmt.Errorf("user cannot send messages in this room")
	}

	// Foreign key validation (‡πÉ‡∏ä‡πâ cache ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ)
	if err := s.fkValidator.ValidateForeignKeys(ctx, map[string]interface{}{
		"users": msg.UserID,
		"rooms": msg.RoomID,
	}); err != nil {
		return fmt.Errorf("foreign key validation failed: %w", err)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á ID ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏û‡∏∑‡πà‡∏≠ tracking)
	msg.ID = primitive.NewObjectID()
	log.Printf("[ChatService] Generated message ID: %s", msg.ID.Hex())

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á tracking record ‡∏Å‡πà‡∏≠‡∏ô broadcast
	if err := s.createMessageStatus(msg.ID, msg.RoomID); err != nil {
		log.Printf("[ChatService] ‚ö†Ô∏è Failed to create message status tracking: %v", err)
		// Continue anyway - this is not critical for UX
	}

	// BROADCAST: ‡∏™‡πà‡∏á‡πÑ‡∏õ WebSocket ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÇ‡∏Ñ‡∏£‡∏ï‡∏û‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏ï‡πÅ‡∏°‡πà**
	log.Printf("[ChatService] üöÄ Broadcasting message ID=%s immediately to WebSocket", msg.ID.Hex())
	broadcastStart := primitive.NewObjectID().Timestamp()

	// ‡∏ñ‡πâ‡∏≤ error ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
	if err := s.emitter.EmitMessage(ctx, msg, metadata); err != nil {
		log.Printf("[ChatService] ‚ùå CRITICAL: Failed to emit message to WebSocket: %v", err)

		// Fallback ‡∏ñ‡πâ‡∏≤  message ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
		s.updateMessageStatusWithError(msg.ID, fmt.Sprintf("broadcast failed: %v", err), 0)

		// This is critical - return error if we can't broadcast
		return fmt.Errorf("failed to broadcast message: %w", err)
	}

	// broadcast ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
	broadcastDuration := primitive.NewObjectID().Timestamp().Sub(broadcastStart)
	log.Printf("[ChatService] ‚úÖ WebSocket broadcast successful in %v for message ID=%s",
		broadcastDuration, msg.ID.Hex())

	// Async ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö pararel ‡∏î‡πâ‡∏ß‡∏¢ ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Background **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÇ‡∏Ñ‡∏£‡∏ï‡∏û‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏ï‡πÅ‡∏°‡πà**
	bgCtx := context.Background()

	// **ENHANCED: Submit jobs with better error handling**
	jobsSubmitted := 0 // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô jobs ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ
	totalJobs := 3     // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô jobs ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ

	// Submit database save job (highest priority for persistence)

	// save ‡∏•‡∏á‡πÉ‡∏ô Database **‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÇ‡∏Ñ‡∏£‡∏ï‡∏û‡πà‡∏≠‡πÇ‡∏Ñ‡∏£‡∏ï‡πÅ‡∏°‡πà**
	if s.SubmitDatabaseJob("save_message", msg, bgCtx) {
		jobsSubmitted++ // ‡πÄ‡∏û‡∏¥‡πâ‡∏° job submit
		log.Printf("[ChatService] ‚úÖ DB save job submitted for message %s", msg.ID.Hex())
	} else {
		log.Printf("[ChatService] ‚ö†Ô∏è CRITICAL: DB save job queue full for message %s", msg.ID.Hex())

		// Fallback ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡∏ñ‡πâ‡∏≤ ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
		go func() {
			if _, err := s.Create(bgCtx, *msg); err != nil {
				log.Printf("[ChatService] ‚ùå FALLBACK: Direct DB save failed for message %s: %v",
					msg.ID.Hex(), err)
				s.updateMessageStatusWithError(msg.ID, "fallback db save failed", 0)
			} else {
				log.Printf("[ChatService] ‚úÖ FALLBACK: Direct DB save successful for message %s",
					msg.ID.Hex())
				s.updateMessageStatus(msg.ID, "saved_to_db", true)
			}
		}()
	}

	// Save ‡∏ö‡∏ß‡πÉ‡∏ô cache ‡∏î‡πâ‡∏ß‡∏¢ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
	if s.SubmitDatabaseJob("cache_message", msg, bgCtx) {
		jobsSubmitted++
		log.Printf("[ChatService] ‚úÖ Cache job submitted for message %s", msg.ID.Hex())
	} else {
		log.Printf("[ChatService] ‚ö†Ô∏è Cache job queue full for message %s", msg.ID.Hex())
	}

	//  ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Å‡∏•‡∏≤‡∏á)
	onlineUsers := s.hub.GetOnlineUsersInRoom(msg.RoomID.Hex())
	if s.SubmitNotificationJob(msg, onlineUsers, bgCtx) {
		jobsSubmitted++
		log.Printf("[ChatService] ‚úÖ Notification job submitted for message %s (%d online users)",
			msg.ID.Hex(), len(onlineUsers))
	} else {
		log.Printf("[ChatService] ‚ö†Ô∏è Notification job queue full for message %s", msg.ID.Hex())
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ message ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡πà‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏° ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö message ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å cache ‡∏î‡πâ‡∏ß‡∏¢
	successRate := float64(jobsSubmitted) / float64(totalJobs) * 100
	log.Printf("[ChatService] üìä Message %s processing: Broadcast=‚úÖ, Jobs=%d/%d (%.1f%% success)",
		msg.ID.Hex(), jobsSubmitted, totalJobs, successRate)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ rate ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡πà‡∏≤ 66 ‡πÑ‡∏´‡∏° ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡πâ‡∏≤ success rate ‡∏ï‡πà‡∏≥
	if successRate < 66.0 { // ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2/3 jobs submitted
		log.Printf("[ChatService] ‚ö†Ô∏è WARNING: Low job submission rate %.1f%% for message %s - system may be under high load",
			successRate, msg.ID.Hex())
	}

	// **SUCCESS: Message ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (broadcast ‡πÅ‡∏•‡πâ‡∏ß, jobs queued)**
	log.Printf("[ChatService] ‚úÖ Message %s processed successfully - UX immediate, background jobs queued",
		msg.ID.Hex())

	return nil
}
