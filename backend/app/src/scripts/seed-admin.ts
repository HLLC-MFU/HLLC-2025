/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á admin account ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á database
 *
 * ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * 1. cd backend
 * 2. pnpm exec ts-node src/scripts/seed-admin.ts
 */

import { MongoClient, ObjectId } from 'mongodb';
import * as bcrypt from 'bcryptjs';
import * as dotenv from 'dotenv';
import { join } from 'path';

// ‡πÇ‡∏´‡∏•‡∏î .env file
dotenv.config({ path: join(__dirname, '../../.env') });

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Actions ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô role.schema.ts
enum Actions {
  Read = 'read',
  Create = 'create',
  Update = 'update',
  Delete = 'delete',
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á permissions ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö `${string}:${Actions}`
const createPermissions = () => {
  const resources = [
    'users',
    'schools',
    'majors',
    'roles',
    'activities',
    'checkin',
  ];
  const actions = Object.values(Actions);

  const permissions: string[] = [];

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions ‡πÅ‡∏ö‡∏ö‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
  for (const resource of resources) {
    for (const action of actions) {
      permissions.push(`${resource}:${action}`);
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions ‡πÅ‡∏ö‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
  for (const resource of resources) {
    for (const action of actions) {
      permissions.push(`${resource}:${action}:id`);
    }
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° permissions ‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
  permissions.push('admin:access');

  return permissions;
};

// Configuration
const config = {
  mongoUri: process.env.MONGO_URI || 'mongodb://localhost:27017/hllc_db',
  adminUser: {
    name: {
      first: 'System',
      last: 'Administrator',
    },
    username: 'admin',
    password: 'password123',
    roleName: 'Administrator',
    permissions: createPermissions(),
  },
};

async function seedAdminUser(): Promise<void> {
  console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Seed Admin Account');
  console.log(`üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB: ${config.mongoUri}`);

  const client = new MongoClient(config.mongoUri);

  try {
    await client.connect();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    const db = client.db();
    const usersCollection = db.collection('users');
    const rolesCollection = db.collection('roles');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ admin user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingUser = await usersCollection.findOne({
      username: config.adminUser.username,
    });
    if (existingUser) {
      console.log('‚ö†Ô∏è Admin user ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á admin role
    let adminRole = await rolesCollection.findOne({
      name: config.adminUser.roleName,
    });

    if (!adminRole) {
      console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á admin role...');
      const roleResult = await rolesCollection.insertOne({
        name: config.adminUser.roleName,
        permissions: config.adminUser.permissions,
        metadataSchema: {
          required: [],
          properties: {},
        },
        createdAt: new Date(),
        updatedAt: new Date(),
      });

      adminRole = await rolesCollection.findOne({ _id: roleResult.insertedId });
      console.log(
        `‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin role ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à, ID: ${adminRole?._id.toString()}`,
      );
      console.log(
        `‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Permissions ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${config.adminUser.permissions.length} ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå`,
      );
    } else {
      console.log(`‚ÑπÔ∏è ‡∏Ñ‡πâ‡∏ô‡∏û‡∏ö Admin role, ID: ${adminRole._id.toString()}`);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï permissions ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
      if (
        Array.isArray(adminRole.permissions) &&
        adminRole.permissions.length !== config.adminUser.permissions.length
      ) {
        await rolesCollection.updateOne(
          { _id: adminRole._id },
          { $set: { permissions: config.adminUser.permissions } },
        );
        console.log(
          `‚úÖ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï Permissions ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${config.adminUser.permissions.length} ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå`,
        );
      }
    }

    if (!adminRole) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ admin role ‡πÑ‡∏î‡πâ');
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á admin user
    const hashedPassword = await bcrypt.hash(config.adminUser.password, 10);

    const result = await usersCollection.insertOne({
      name: config.adminUser.name,
      username: config.adminUser.username,
      password: hashedPassword,
      role: adminRole._id,
      refreshToken: null,
      metadata: {},
      createdAt: new Date(),
      updatedAt: new Date(),
    });

    console.log('');
    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Admin user ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log(`üÜî User ID: ${result.insertedId.toString()}`);
    console.log('üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö:');
    console.log(`üë§ Username: ${config.adminUser.username}`);
    console.log(`üîë Password: ${config.adminUser.password}`);
    console.log('');
    console.log('üî∞ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≤‡∏ô API:');
    console.log('üî∞ POST /api/auth/login');
    console.log(
      `üî∞ Body: { "username": "${config.adminUser.username}", "password": "${config.adminUser.password}" }`,
    );
  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á admin user:', error);
  } finally {
    await client.close();
    console.log('üì° ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB');
  }
}

// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
seedAdminUser()
  .catch(console.error)
  .finally(() => {
    console.log('üèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  });
