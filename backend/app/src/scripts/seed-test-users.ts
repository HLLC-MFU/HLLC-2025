/**
 * Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á test users ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô 1,000 users ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebSocket
 *
 * ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:
 * 1. cd backend
 * 2. pnpm exec ts-node src/scripts/seed-test-users.ts
 */

import { MongoClient, ObjectId } from 'mongodb';
import * as dotenv from 'dotenv';
import { join } from 'path';
import * as fs from 'fs';

// ‡πÇ‡∏´‡∏•‡∏î .env file
dotenv.config({ path: join(__dirname, '../../.env') });

// Configuration
const config = {
  mongoUri: process.env.MONGO_URI || 'mongodb://localhost:27017/hllc_db',
  totalUsers: 10000,
  batchSize: 50, // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô users ‡∏ï‡πà‡∏≠ batch
  userTemplate: {
    name: {
      first: "user",
      middle: "user.",
      last: "user"
    },
    role: new ObjectId("684d3e65a2368d21b0e1aa2a"),
    metadata: {
      major: new ObjectId("6847c1a45a319b7f4659490a")
    }
  }
};

interface CreatedUser {
  _id: ObjectId;
  username: string;
}

interface User {
  username: string;
  name: {
    first: string;
    middle: string;
    last: string;
  };
  role: ObjectId;
  metadata: {
    major: ObjectId;
  };
  createdAt: Date;
  updatedAt: Date;
}

async function seedTestUsers(): Promise<void> {
  console.log('üå± ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ Seed Test Users');
  console.log(`üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB: ${config.mongoUri}`);

  const client = new MongoClient(config.mongoUri);
  const createdUsers: CreatedUser[] = [];

  try {
    await client.connect();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    const db = client.db();
    const usersCollection = db.collection('users');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡πÄ‡∏õ‡πá‡∏ô batch
    for (let i = 0; i < config.totalUsers; i += config.batchSize) {
      const batch: User[] = [];
      const batchEnd = Math.min(i + config.batchSize, config.totalUsers);
      
      console.log(`\nüì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á batch ${i / config.batchSize + 1} (users_ ${i + 1} - ${batchEnd})`);

      for (let j = i; j < batchEnd; j++) {
        const username = `users_${j + 1}`;
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ user ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingUser = await usersCollection.findOne({ username });
        if (existingUser) {
          console.log(`‚ö†Ô∏è User ${username} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°`);
          continue;
        }

        batch.push({
          ...config.userTemplate,
          username,
          createdAt: new Date(),
          updatedAt: new Date()
        });
      }

      if (batch.length > 0) {
        const result = await usersCollection.insertMany(batch);
        console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á ${batch.length} users ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        Object.entries(result.insertedIds).forEach(([_, id]) => {
          createdUsers.push({
            _id: id,
            username: `users_${createdUsers.length + 1}`
          });
        });
      }

      // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á batch
      if (i + config.batchSize < config.totalUsers) {
        await new Promise(resolve => setTimeout(resolve, 1000));
      }
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebSocket
    const outputPath = join(__dirname, '../../../test-users.json');
    fs.writeFileSync(outputPath, JSON.stringify(createdUsers, null, 2));

    console.log('\n‚úÖ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô:');
    console.log(`üìä ‡∏™‡∏£‡πâ‡∏≤‡∏á users ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${createdUsers.length} users`);
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• users ‡πÑ‡∏õ‡∏ó‡∏µ‡πà: ${outputPath}`);
    console.log('\nüî∞ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö WebSocket ‡πÅ‡∏•‡πâ‡∏ß');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á test users:', error);
  } finally {
    await client.close();
    console.log('üì° ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MongoDB');
  }
}

// ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
seedTestUsers()
  .catch(console.error)
  .finally(() => {
    console.log('üèÅ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  }); 